
cBaseFileName = 'rcp_type_list'
outputCFile = open(cBaseFileName+'.c','w')
outputCHeader = open(cBaseFileName+'.h','w')

def newTypeInfo(name, cType):
	return {
		'typeName':name,
		'cType':cType
	}


numberTypes = [] 
numberTypes.append(newTypeInfo('uint64','uint64_t'))
numberTypes.append(newTypeInfo('uint32','uint32_t'))
numberTypes.append(newTypeInfo('uint16','uint16_t'))
numberTypes.append(newTypeInfo('uint8','uint8_t'))

numberTypes.append(newTypeInfo('int64','int64_t'))
numberTypes.append(newTypeInfo('int32','int32_t'))
numberTypes.append(newTypeInfo('int16','int16_t'))
numberTypes.append(newTypeInfo('int8','int8_t'))

numberTypes.append(newTypeInfo('double','double'))
numberTypes.append(newTypeInfo('float','float'))

#internal?
numberTypes.append(newTypeInfo('pointer','void*'))

typeList = [] 

typeList.append('bool')

typeList.append('struct')

#utf8 string
typeList.append('string')
typeList.append('binaly')

typeList.append('map')
typeList.append('list')

typeList.append('ref')

typeList.append('any')
typeList.append('null')
typeList.append('undefined')

numberTypeTemplate="""
void rcp_type_{typeName}_copy(void *src, void *dst){{
	*({cType}*)dst = *({cType}*)src;
}}
int rcp_type_{typeName}_compair(void *src, void *dst){{
	//this implement cause over flow
	//return *({cType}*)dst - *({cType}*)src;
	if (*({cType}*)dst<*({cType}*)src)
		return -1;
	if (*({cType}*)dst>*({cType}*)src)
		return +1;
	return 0;
}}
struct rcp_type_core rcp_type_{typeName} = {{
	NULL,//init
	NULL,//free
	rcp_type_{typeName}_copy,
	rcp_type_{typeName}_compair,
	sizeof({cType})
}};
"""

numberTypeHeaderTemplate="""
extern struct rcp_type_core rcp_type_{typeName};
"""

outputCFile.write('//This file was generated by program.\n')
outputCFile.write('#include "rcp_pch.h"\n');
outputCFile.write('#include "rcp_type.h"\n');
for info in numberTypes:
	outputCFile.write(numberTypeTemplate.format(**info))

outputCHeader.write('//This file was generated by program.\n')
for info in numberTypes:
	outputCHeader.write(numberTypeHeaderTemplate.format(**info))
