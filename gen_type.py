
cBaseFileName = 'rcp_type_number'
outputCFile = open(cBaseFileName+'.c','w')
outputCHeader = open(cBaseFileName+'.h','w')

def newTypeInfo(name, cType):
	return {
		'typeName':name,
		'cType':cType
	}


typeList = [] 

numberTypes = [] 
	##set(value)

#uint
numberTypes.append(newTypeInfo('uint64','uint64_t'))
numberTypes.append(newTypeInfo('uint32','uint32_t'))
numberTypes.append(newTypeInfo('uint16','uint16_t'))
numberTypes.append(newTypeInfo('uint8','uint8_t'))

#int
numberTypes.append(newTypeInfo('int64','int64_t'))
numberTypes.append(newTypeInfo('int32','int32_t'))
numberTypes.append(newTypeInfo('int16','int16_t'))
numberTypes.append(newTypeInfo('int8','int8_t'))

#float
numberTypes.append(newTypeInfo('double','double'))
numberTypes.append(newTypeInfo('float','float'))

#for internal implement
numberTypes.append(newTypeInfo('pointer','void*'))

#true or false
typeList.append('bool8')
typeList.append('bool32')
	##set(value)

#utf8 string
typeList.append('string')
	##set(value)
	##push(value)

typeList.append('binaly')
	##set(value)
	##push(value)

typeList.append('map')
	##set(key, value)
	##unset(key)

#typeList.append('orderd_key_value')

#static map
typeList.append('struct')
	##set(key, value)

typeList.append('list')
	##push(value)
	##pop(value)
	##set(index, value)
	##unset(index)
	##swap(index, index)

#static array
typeList.append('array')
	##set(index, value)

typeList.append('ref')

#for type argument of a map or a list
typeList.append('any')

#type:null value:null
typeList.append('null')

for numType in numberTypes:
	typeList.append(numType['typeName'])

numberTypeTemplate="""
void rcp_{typeName}_type_copy(void *src, void *dst){{
	*({cType}*)dst = *({cType}*)src;
}}
int rcp_{typeName}_type_compair(void *src, void *dst){{
	//this implement cause over flow
	//return *({cType}*)dst - *({cType}*)src;
	if (*({cType}*)dst<*({cType}*)src)
		return -1;
	if (*({cType}*)dst>*({cType}*)src)
		return +1;
	return 0;
}}
struct rcp_type_core rcp_{typeName}_type = {{
	sizeof({cType}),
	NULL,//init
	NULL,//free
	rcp_{typeName}_type_copy,
	rcp_{typeName}_type_compair,
}};
"""

numberTypeHeaderTemplate="""
extern struct rcp_type_core rcp_{typeName}_type;
"""

outputCFile.write('//This file was generated by program.\n')
outputCFile.write('#include "rcp_pch.h"\n');
outputCFile.write('#include "rcp_utility.h"\n');
outputCFile.write('#include "rcp_type.h"\n');
for info in numberTypes:
	outputCFile.write(numberTypeTemplate.format(**info))

outputCHeader.write('//This file was generated by program.\n')
for info in numberTypes:
	outputCHeader.write(numberTypeHeaderTemplate.format(**info))
