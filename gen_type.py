
numberCBaseFileName = 'rcp_number'
outNumberCFile = open(numberCBaseFileName+'.c','w')
outNumberCHeader = open(numberCBaseFileName+'.h','w')

listCBaseFileName = 'rcp_type_list'
outListCFile = open(listCBaseFileName+'.c','w')
outListCHeader = open(listCBaseFileName+'.h','w')

def newTypeInfo(name, cType):
	return {
		'typeName':name,
		'cType':cType
	}

typeTable = [
#	[id,	name,		c_type]
#someting special
	[0,		'null',		None],
	[1,		'ref',		'rcp_record_ref'],
#	[2,		'internal',	no info],

#16-24 container
	[16,	'map',		'rcp_record_ref'],
#	[17,	'set',		None],
	[18,	'array',	'rcp_record_ref'],
#	[19,	'struct',	None],

	[20,	'string',	'rcp_record_ref'],
#	[21,	'binaly',	None],
#25-31 bool
	[25,	'bool8',	'uint8_t'],
	[26,	'bool32',	'uint32_t'],

#32-63 number
#32-39 uint
	[32,	'uint8',	'uint8_t'],
	[33,	'uint16',	'uint16_t'],
	[34,	'uint32',	'uint32_t'],
	[35,	'uint64',	'uint64_t'],

#40-47 int
	[40,	'int8',		'int8_t'],
	[41,	'int16',	'int16_t'],
	[42,	'int32',	'int32_t'],
	[43,	'int64',	'int64_t'],

#48-55 float
#	[48,	'half',		'half'],
	[49,	'float',	'float'],
	[50,	'double',	'double'],
]

#for internal use
exTypeTable = [
#	[id,	name,		c_type]
	[2,		'pointer',	'void*'],
]

typeList = []
typeDict = {}
for typeInfo in typeTable:
	typeInfoDict = {};
	typeInfoDict['typeID'] = typeInfo[0]
	typeInfoDict['typeName'] = typeInfo[1]
	typeInfoDict['cTypeName'] = typeInfo[2]
	typeList.append(typeInfoDict)
	typeDict[typeInfo[1]] = typeInfoDict

exTypeList = []
for typeInfo in exTypeTable:
	typeInfoDict = {}
	typeInfoDict['typeID'] = typeInfo[0]
	typeInfoDict['typeName'] = typeInfo[1]
	typeInfoDict['cTypeName'] = typeInfo[2]
	exTypeList.append(typeInfoDict);

numberTypeList = [] 
for typeInfo in typeList:
	if typeInfo['typeID'] & 0x20:
		numberTypeList.append(typeInfo)

for typeInfo in exTypeList:
	numberTypeList.append(typeInfo)

#
# generate program(number)
#

numberTypeTemplate="""
void rcp_{typeName}_type_copy(
		rcp_type_ref type, rcp_data_ref src, rcp_data_ref dst){{
	*({cTypeName}*)dst = *({cTypeName}*)src;
}}
int rcp_{typeName}_type_compare(
		rcp_type_ref ex, rcp_data_ref l, rcp_data_ref r){{
	//this implement causes over flow
	//return *({cTypeName}*)l - *({cTypeName}*)r;
	//so use that.
	if (*({cTypeName}*)l<*({cTypeName}*)r)
		return -1;
	if (*({cTypeName}*)l>*({cTypeName}*)r)
		return +1;
	return 0;
}}
const struct rcp_type_core rcp_{typeName}_type_def = {{
	sizeof({cTypeName}),
	RCP_TYPE_{capName},
	"{typeName}",
	NULL,//init
	NULL,//free
	rcp_{typeName}_type_copy,
	rcp_{typeName}_type_compare,
}};
"""

numberTypeHeaderTemplate="""
rcp_extern int rcp_{typeName}_type_compare(
		const void* ex, void* l, void* r);
"""

outNumberCFile.write('//This file was generated by program.\n')
outNumberCFile.write('#include "rcp_pch.h"\n');
outNumberCFile.write('#include "rcp_utility.h"\n');
outNumberCFile.write('#define RCP_INTERNAL_STRUCTURE\n');
outNumberCFile.write('#include "rcp_type.h"\n');
outNumberCFile.write('#include "rcp_type_list.h"\n');
for info in numberTypeList:
	outNumberCFile.write(numberTypeTemplate.format(
				capName = info['typeName'].upper(),
				**info))

outNumberCHeader.write('//This file was generated by program.\n')
for info in numberTypeList:
	outNumberCHeader.write(numberTypeHeaderTemplate.format(**info))

#
# generate program(number)
#

typeTemplate="""
extern const struct rcp_type_core rcp_{typeName}_type_def;
const rcp_type_ref rcp_{typeName}_type = &rcp_{typeName}_type_def;
"""

typeHeaderTemplate="""
#define RCP_TYPE_{capName} ((rcp_type_id_t){typeID})
extern const rcp_type_ref rcp_{typeName}_type;
"""

outListCFile.write('//This file was generated by program.\n')
outListCFile.write('#include "rcp_pch.h"\n');
outListCFile.write('#include "rcp_utility.h"\n');
outListCFile.write('#define RCP_INTERNAL_STRUCTURE\n');
outListCFile.write('#include "rcp_type.h"\n');
for info in typeList:
	outListCFile.write(typeTemplate.format(**info))
for info in exTypeList:
	outListCFile.write(typeTemplate.format(**info))

outListCHeader.write('//This file was generated by program.\n')
for info in typeList:
	outListCHeader.write(typeHeaderTemplate.format(
				capName = info['typeName'].upper(),
				**info))
for info in exTypeList:
	outListCHeader.write(typeHeaderTemplate.format(
				capName = info['typeName'].upper(),
				**info))
